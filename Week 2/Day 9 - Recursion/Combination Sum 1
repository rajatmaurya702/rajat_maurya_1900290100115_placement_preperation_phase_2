class Solution {
public:
    void dfs(int i, int j, vector<vector<int>> &fans,vector<vector<pair<int, vector<int>>>> &dp, 
                vector<int> &curr, vector<int> &c){
        // cout << "\n" << i << " " << j << "|| \n";
          if(i==0) {
            fans.push_back(curr); 
            // cout << "\n";
            // curr.clear();
            return;
        }
        if(j==0){
           int cnt = i;
             int ttt = cnt/c[j];
            while(ttt--){
                curr.push_back(c[j]);
                // cout << c[j] << " size: " << curr.size() << "    ";
            }

            ttt= cnt/c[j];
            fans.push_back(curr);
            // cout << "\n";
            while(ttt--){
                curr.pop_back();
            }
            
            return;
            
        }
      
        for(int k = 0; k < dp[i][j].second.size(); k++){
            int cnt = i- dp[i][j].second[k];
        
            int ttt = cnt/c[j];
            while(ttt--){
                curr.push_back(c[j]);
                // cout << c[j] << " size: " << curr.size() << "    ";
            }
            dfs(dp[i][j].second[k], j - 1, fans, dp, curr, c);
            ttt= cnt/c[j];
            while(ttt-- && curr.size()){
                curr.pop_back();
            }
        }
        
    }
    vector<vector<int>> combinationSum(vector<int>& c, int target) {
     
        vector<vector<pair<int, vector<int>>>> dp(target +1, vector<pair<int, vector<int>>>(c.size()));
        for(int i = 0; i<= target; i++){
            for(int j = 0; j < c.size(); j++){
                dp[i][j].first = 0;
            }
        }
        for(int i = 0; i<= target; i++){
          
            
            for(int j = 0; j < c.size(); j++){
                
                 if(i==0) {dp[i][j].first = 1; continue;}
                if(j==0 && i%c.front()==0){
                    dp[i][j].first = 1;
                    dp[i][j].second.push_back(0);
                    continue;
                }
                int cnt = 0;
                for(int k = 0; k * c[j] <= target; k++){
                    int val =  (i-k*c[j] >=0 && j-1 >=0) ? dp[i- k *c[j]][j - 1].first:0;
                    cnt += val;
                    if(val){
                        dp[i][j].second.push_back(i-k*c[j]);
                    }
                    // cout << ((i-k*c[j] >=0 && j-1 >=0) ? dp[i- k *c[j]][j - 1]:0) << "\n";
                }
                dp[i][j].first +=cnt;
            }
        }
//         for(auto x: dp){
            
//             for(auto y: x){
//                 cout << "(";
//                 cout << y.first << ": ";
//                 for(auto k: y.second){
//                     cout << k << " ";
//                 }
//                 cout << ")";
//             }
//             cout << "\n";
//         }
        vector<vector<int>> fans;
        vector<int> curr;
       if(dp[target][c.size()-1].second.size()) dfs(target,  c.size() - 1, fans, dp, curr, c);
        // cout << dp[target][c.size()-1].first << "\n";
        if(fans.size()==1 && fans.front().size()==0) fans.clear();
        return
            fans;
    }
};
